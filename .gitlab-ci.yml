stages:
  - init
  - test
  - sonar-scan
  - build
  - prepare-artifact
  - deploy-cerebra-on-pibrocks
  - deploy-onshape-stls-files-on-pibrocks

variables:
  IMAGE: node:18-bullseye
  USER: cerebra2
  NGINX_DIR: /etc/nginx/html
  PROJECT_DIR: /cerebra

init:
  stage: init
  tags: ["lea"]
  script:
    - echo "pipeline initialized"
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" || $CI_COMMIT_BRANCH == "master"

static_analysis:
  image: ${IMAGE}
  stage: test
  allow_failure: false
  script:
    - echo "runing static analysis"
    - npm link @angular/cli
    - ng lint
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" || $CI_COMMIT_BRANCH == "master"
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules
    policy: pull
  tags: ["lea"]

run_tests:
  image: ${IMAGE}
  stage: test
  allow_failure: false
  before_script:
    - echo "runing unit tests"
    - apt-get update
    - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    - apt install -y ./google-chrome*.deb;
    - export CHROME_BIN=/usr/bin/google-chrome
  script:
    - npm ci
    - npm link @angular/cli
    - ng test --code-coverage --watch=false --browsers=NoSandbox
  artifacts:
    paths:
      - $CI_PROJECT_DIR/coverage
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"  || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" || $CI_COMMIT_BRANCH == "master"
  tags: ["lea"]

sonarqube-check:
  stage: sonar-scan
  tags: ["lea"]
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo "runing sonarqube check"
    - sonar-scanner
  allow_failure: true
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" || $CI_COMMIT_BRANCH == "master"

build_app:
  stage: build
  image: ${IMAGE}
  script:
    - echo "runing the build"
    - npm link @angular/cli
    - ng build --configuration production
  artifacts:
    expire_in: 12 hrs
    paths:
      - dist/cerebra/
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  tags: ["lea"]

rearrange_build_artifacts:
  stage: prepare-artifact
  needs: [build_app]
  script:
    - echo "preparing the build artifact"
    - mkdir -p cerebra && mv dist/cerebra/* cerebra/
    - rm -rf ./dist
  artifacts:
    paths:
      - cerebra/
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  tags: ["lea"]

deploy-cerebra-on-pibrocks:
  image: ${IMAGE}
  needs: [rearrange_build_artifacts, run_tests]
  stage: deploy-cerebra-on-pibrocks
  variables:
    USER: "pib.rocks"
    HOST: "ssh.strato.de"
    SOURCE: "/builds/lea-labs/cerebra2/cerebrazipfolder/"
    DESTINATION: "/STRATO-apps/wordpress_01/app/wp-content/uploads/pib_data/"
    FILENAME: "cerebra-latest.zip"
  before_script:
    - apt-get update
    - apt-get install git
    - apt-get install openssh-client
    - apt-get install lftp
    - apt-get install -y zip unzip
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule") && ($PIB_ROCKS_CEREBRA_SCHEDULE == "true") &&  $CI_COMMIT_BRANCH == "master"
  script:
    - zip -r $FILENAME cerebra
    # put cerebra zip in cerebrazipfolder to transfer the whole file contents to pib-rocks server with the lftp command
    - mkdir cerebrazipfolder && mv $FILENAME cerebrazipfolder
    - cd cerebrazipfolder
    # gather the SSH host keys and save them in /root/.ssh/known_hosts
    - mkdir /root/.ssh
    - chmod 700 /root/.ssh
    - touch /root/.ssh/known_hosts
    - chmod 600 /root/.ssh/known_hosts
    - ssh-keyscan -H $HOST >> /root/.ssh/known_hosts
    # transfer the files to the server
    - lftp  -e "mirror --transfer-all --reverse  -X .* --verbose $SOURCE $DESTINATION; quit" -u "$USER","$PIB_ROCKS_PASSWORD" sftp://"$USER"@"$HOST" -p 22
  tags: ["lea"]

deploy-onshape-stls-files-on-pibrocks:
  stage: deploy-onshape-stls-files-on-pibrocks
  image: ${IMAGE}
  variables:
    USER: "pib.rocks"
    HOST: "ssh.strato.de"
    SOURCE: "/builds/lea-labs/cerebra2/stl-files/new-folder/"
    DESTINATION: "/STRATO-apps/wordpress_01/app/wp-content/uploads/pib_data/"
  before_script:
    - apt-get update
    - apt-get install git
    - apt-get install -y python3-pip
    - apt-get install python3
    - pip install onshape-client
    - apt-get install openssh-client
    - pip install ipython
    - apt-get install -y zip unzip
    - apt-get install lftp
  # rules:
  #   - if: ($CI_PIPELINE_SOURCE == "schedule") && ($PIB_ROCKS_STL_FILES_SCHEDULE == "true") &&  $CI_COMMIT_BRANCH == "PR-142"
  script:
    - mkdir new-folder
    - cp onshape.py new-folder
    - cd new-folder
    #create directory stl-files
    - mkdir stl-files githubrepo
    # create directory pib-stls-latest inside stl-files directory
    - mkdir stl-files/pib-stls-latest
    # create four subdirectories (A-Head, B-Body, C-Arm and D-Hand_Fingers) in stl-files/pib-stls-lates
    - mkdir stl-files/pib-stls-latest/A-Head stl-files/pib-stls-latest/B-Body stl-files/pib-stls-latest/C-Arm stl-files/pib-stls-latest/D-Hand_Fingers
    # run the onshape.py script
    - python3 onshape.py "$ON_SHAPE_ACCESS_KEY" "$ON_SHAPE_SECRET_KEY"
    # The following commands move all stl files that are generated after executing the python coding to the specific subdirectory
    # Each file will be moved to the specific subdirectory depending on the first letter of the filename
    - mv A??-*.stl stl-files/pib-stls-latest/A-Head
    - mv B??-*.stl stl-files/pib-stls-latest/B-Body
    - mv C??-*.stl stl-files/pib-stls-latest/C-Arm
    - mv D??-*.stl stl-files/pib-stls-latest/D-Hand_Fingers
    - cd stl-files
    # generate the zip file the will be transferred to the pib.rocks server
    - zip -r pib-stls-latest.zip pib-stls-latest
    # gather the SSH host keys and save them in /root/.ssh/known_hosts
    - mkdir /root/.ssh
    - chmod 700 /root/.ssh
    - touch /root/.ssh/known_hosts
    - chmod 600 /root/.ssh/known_hosts
    - ssh-keyscan -H $HOST >> /root/.ssh/known_hosts
    # delete the directory
    - cp pib-stls-latest ../githubrepo
    - ls -lk
    - rm -r pib-stls-latest
    - ls -lk
    - cd ../githubrepo
    - ls -lk
    # transfer the files to the server
    - lftp  -e "mirror --transfer-all --reverse  -X .* --verbose $SOURCE $DESTINATION; quit" -u "$USER","$PIB_ROCKS_PASSWORD" sftp://"$USER"@"$HOST" -p 22

  tags: ["lea"]
